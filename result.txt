


/*希望老师在批改之前可以看一下代码的文档 -- README.md -- 谢谢！*/
/*代码已按照要求实现了题目中所有功能，详情请见代码的文档*/


## ListQueue功能的测试

### 题目要求的测试 （插入100K个数） 见最下面

### test0 -- 尾插/尾删/[]的测试
先向ListQueue<int>lq里面插入 1~6 再尾删3个元素
程序运行结果：
1 2 3

### test1 -- insert/erase/pop_front/push_front的测试
先插入1~6
再在 pos == 2 的位置插入一个30
再在 pos == 2 的位置插入一个300
打印一次(用output_detail打印) -- 这个output_detail不是print -- output_detail()函数和output函数供测试用 -- 测试完可以设为私有

用insert头插一个0，用insert头插一个-1
打印一次(用output_detail打印)

删除pos == 4的位置，打印一次
删除pos == 3的位置，打印一次
pop_front两下 -- 打印一次
pop_front一次 -- 打印一次
最后用[]结合size()迭代一次 -- 打印所有值
print一下 -- 测试print的功能

程序运行结果：
 -------------- 测试insert --------------
1 2 300
30 3
4 5 6


-1 0 1
2
300 30 3
4 5 6


-1 0 1 2 300 30 3 4 5 6
-1 0 1
2
300 30 3
4 5 6

 -------------- 测试erase --------------
-1 0 1
2
30 3
4 5 6

-1 0 1
30 3
4 5 6

1
30 3
4 5 6

30 3
4 5 6

 -------------- 测试operator[] --------------
30 3 4 5 6



 -------------- 测试print --------------
curent list info: 30 3 4 5 6

curent detail info:
Nodes[0] Size: 2 --> 30 3
Nodes[1] Size: 3 --> 4 5 6

other info:
NodesNumber: 2
Element Size: 5


### test2 -- 测试拷贝构造和迭代器区间构造
代码如下：
	//测试拷贝构造
	ListQueue<int>lq = { 1,2,3,4,5,6,7,8,10 };
	lq.output();
	ListQueue<int>lq_copy(lq);
	lq_copy.output();
	cout << endl;

	//测试迭代器区间构造
	set<int>s = { 1,3,5,7,9,2,4,6,8,10 };
	ListQueue<int>lq2(s.begin(), s.end());
	lq2.output();
	cout << endl;

程序运行结果：
1 2 3 4 5 6 7 8 10
1 2 3 4 5 6 7 8 10

1 2 3 4 5 6 7 8 9 10


### test3 -- 测试find和sort
代码如下：
	//测试查找和排序
	ListQueue<int>lq = { 1,2,3,4,5,6,7,1,2,3 };
	lq.output_detail();
	lq.sort();
	lq.output_detail();

	lq.erase(lq.find(3));
	lq.output_detail();
	//经过测试 -- 排序和删除没问题
程序结果如下：
1 2 3
4 5 6
7 1 2
3

1 1 2
2 3 3
4 5 6
7

1 1 2
2 3
4 5 6
7

### test4 -- 测试迭代器功能
代码如下：
	//测试迭代器
	ListQueue<int>lq = { 1,2,3,4,5,6,7 };
	ListQueue<int>::iterator it = lq.begin();
	while (it != lq.end())
	{
		(*it)++;
		(*it) -= 3;
		cout << *it++ << " ";
	}
	cout << endl;

	//测试迭代器 -- 范围for也可以用了 -- 范围for底层是迭代器的替换
	for (const auto& e : lq)
	{
		cout << e << " ";
	}
	cout << endl;
程序运行结果：
-1 0 1 2 3 4 5
-1 0 1 2 3 4 5

### test5 -- 测试ListQueue和STL部分组件兼容性
	//测试ListQueue和STL部分组件兼容性
	ListQueue<int>lq = { 1,2,3,4,5,6,7,8 };
	auto it = find(lq.begin(), lq.end(), 3);
	cout << *it << endl;
程序运行结果：
3

### 题目要求的测试
	在当前的容器中，以[]的方式随机访问一个元素，然后在它之前插入一个新元素，直到容器中达到100K个元素
	对元素进行随机删除，直至ListQueue对象为空
代码：
{
	/*
	1. 在当前的容器中，以[]的方式随机访问一个元素，然后在它之前插入一个新元素，直到容器中达到100K个元素
	2. 对元素进行随机删除，直至ListQueue对象为空
	*/
	//先插入几个元素
	ListQueue<int>test_list;
	test_list.push_back(1);
	test_list.push_back(2);
	test_list.push_back(3);
	//开始在随机位置插入随机元素
	while (test_list.size() < TEST_SIZE)
	{
		//在0~size位置中随机生成一个数字
		size_t idx = rand() % test_list.size();
		cout << test_list[idx] << " ";
		size_t num = rand() % INT_MAX;
		test_list.insert(idx, num);
	}
	//test_list.output();
	//test_list.output_detail();
	while (test_list.size() > 0)
	{
		//在0~size位置中随机生成一个数字
		size_t idx = rand() % test_list.size();
		test_list.erase(idx);
	}
	//在随机位置删除元素
	test_list.output_detail();
	cout << endl;
}

程序运行结果:
(100K 个数太多了，终端打印不完 -- 这里展示部分，以便展示：我自己加了一下回车)
 3843 5031 5455 6903 3516 15858 13908 30359 28564 18248
 6338 13985 1984 17895 2754 837 19716 9641 2501 29396 
 10818 24687 27679 5069 2436 25696 29125 6644 2286 25822
 258 9180 26451 25471 14133 15735 4974 21845 30744 8051 17
 387 5489 31219 30765 16488 28669 24158 30525 7526 21699 164 
 8287 14893 1915 24369 25218 9910 1458 22879 18632 7003 28371 998
 6 2674 32007 24934 8600 5303 16723 4728 31906 14690 7962 32278 6628 
 26110 21093 13624 10714 261 27462 30213 11025 6023 21934 14090 2
 6955 22443 3380 3158 10476 31276 8717 15602 18703 31153 522
 5 5372 15557 26986 29796 4358 29961 16897 28143 16519 4598
 13342 11377 19615 25631 3043 5092 29090 8934 5225 18698 32649 9910 3
 002 9787 21413 10025 31865 14155 18092 26110 13072 6344 13902 22815 
 6018 17086 23254 23731 22249 23558 30277 7330 11027 29204 19034 15460 1
 5846 20358 14004 16536 13367 25971 11295 11392 12528 7138 24366 3
 554 18449 32588 22232 11699 24447 28950 10333 19559 15875 5487 
 1923 29399 12693 309 2501 8816 1493 6928 7792 15348 14352 289
 18525 30104 10950 22602 14168 22687 23995 1422 30616 32213 5372
 31071 22815 10677 26051 19026 26051 25284 11803 17131 29432 235
 58 24891 170 30722 32522 5621 7925 29907 29934 20750 29988 1499
 0 22531 23456 10269 23207 21659 21713 15899 7640 20036 4112 131
 87 30643 14746 9762 4693 14563 14210 25613 25658 16703 9070 7530
 29642 22851 1476 13290 14999 2239 24364 26817 3309 29239 25659 
 32204 13548 20706 4556 768 14429 31250 3869 25718 28498 7692 1
 3428 32322 17054 23486 32576 23150 8435 26910 9329 4117 12826 
 4510 937 11722 28059 15595 28110 9286 13993 16491 20160 21887 
 8557 20197 30751 16508 2616 2444 26772 11940 1784 26906 14718 1735
 5 11769 16519 11033 9280 20670 20466 7313 7194 364 29951 19981 24369
 19282 20012 24389 14772 10231 29114 8114 12341 26673 32692 14434 2301
 1 5514 30824 18223 12000 13489 24188 15274 2419 3540 19110 14271 31336 316
 62 6894 7677 5668 15214 23978 30708 5023 20807 29785 27297 26277 24217 32094 109
 92 28354 15172 12075 32147 10743 10404 11620 31496 15600 14090 18754 19739 6870 25